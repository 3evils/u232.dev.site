/**
 * Copyright (c) 2017 Xiamen Yaji Software Co.Ltd. All rights reserved.
 * Created by lizhiyi on 2018/3/1.
 */
var child_process = require('child_process');
var http = require('http');
var path = require('path');
var fs = require("fs");


var Server = {

};

var host = '127.0.0.1';
var port = 8911;

Server.init = function () {
    this.isServerConnected = false;
};

Server.start = function () {
    this.init();
    var binDir = path.join(__dirname, "bin");
    var serverPath = path.join(binDir, 'server');
    var cache = path.join(binDir, 'cache');
    var dataFile = path.join(binDir, 'data.db');

    if (!fs.existsSync(cache)) { //缓存文件夹不存在则创建
        fs.mkdirSync(cache);
    }

    this.server = child_process.spawn(serverPath, [`--port=${port}`, `--binDir=${binDir}`, `--cacheDir=${cache}`, `--db=${dataFile}`],
        { cwd: binDir });

    this.server.stdout.on('data', this.onServerData);
    this.server.stderr.on('data', this.onServerError);
    this.server.on('close', this.onServerClose);

    this.checkServer();
};

Server.checkServer = function () {
    http.get(`http://${host}:${port}/info`, (res)=> {
        if (res.statusCode == 200) {
            this.isServerConnected = true;
        } else {
            return setTimeout(this.checkServer.bind(this), 100);
        }
    }).on('error', (e)=> {
        // console.log('checkServer error:', e);
        return setTimeout(this.checkServer.bind(this), 100);
    });
};

Server.onServerData = function (data) {
    // console.log('----stdout: ' + data);
};

Server.onServerError = function () {
    console.log('----stderr: ' + data);
    if (!this.isServerConnected) {
        port++;
        start();
    }
};

Server.onServerClose = function (code, signal) {
    console.log(`child process terminated due to receipt of signal ${signal}`);
};

Server.close = function (callback) {
    this.server.kill();

    if (callback) {
        this.server.on('close', callback);
    }
};

Server.reStart = function (callback) {
    var _this = this;
    this.close(function () {
        _this.start();

        if (callback) {
            callback();
        }
    })
};

Server.getServerUrl = function () {
    return `http://${host}:${port}/`;
};

Server.getUploadUrl = function () {
    return `http://${host}:${port}/include`;
};

Server.getDownloadUrl = function (id) {
    var timeStr = Date.now().toString();
    return `http://${host}:${port}/image/${id}/compressed?${timeStr}`;
};

module.exports = Server;

// Server.start();
// setTimeout(function () {
//     Server.reStart();
// }, 10000);